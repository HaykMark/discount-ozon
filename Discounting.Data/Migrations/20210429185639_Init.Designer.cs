// <auto-generated />
using System;
using Discounting.Data.Context;
using Discounting.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Discounting.Data.Migrations
{
    [DbContext(typeof(DiscountingDbContext))]
    [Migration("20210429185639_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Discounting.Entities.Account.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("Operations")
                        .HasColumnType("smallint");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ZoneId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Discounting.Entities.Account.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsSystemDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(500)");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Discounting.Entities.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivationToken")
                        .HasColumnType("varchar(4000)");

                    b.Property<DateTime?>("ActivationTokenCreationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("CanSign")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeactivationReason")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsConfirmedByAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTestUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("PasswordRetryLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Position")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("SecondName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Discounting.Entities.Account.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Discounting.Entities.Account.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("AccessTokenExpiresDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccessTokenHash")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RefreshTokenExpiresDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshTokenIdHash")
                        .IsRequired()
                        .HasColumnType("varchar(450)");

                    b.Property<string>("RefreshTokenIdHashSource")
                        .HasColumnType("varchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Discounting.Entities.Auditing.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Incident")
                        .HasColumnType("integer");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("IncidentResult")
                        .HasColumnType("smallint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("SourceId")
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("CompanyType")
                        .HasColumnType("smallint");

                    b.Property<string>("DeactivationReason")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("HasPowerOfAttorney")
                        .HasColumnType("boolean");

                    b.Property<string>("IncorporationForm")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KPP")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("OwnerDocument")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OwnerFullName")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OwnerPosition")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PSRN")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PaidUpAuthorizedCapitalInformation")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RegisteringAuthorityName")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RegistrationStatePlace")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("StateRegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StateStatisticsCode")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("TIN")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyAuthorizedUserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AuthorityValidityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IdentityDocument")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsResident")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyAuthorizedUserInfos");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyBankInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bic")
                        .IsRequired()
                        .HasColumnType("varchar(9)");

                    b.Property<string>("CheckingAccount")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("CorrespondentAccount")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .HasColumnType("varchar(13)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyBankInfos");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameOfGoverningBodies")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OrganizationAddress")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyContactInfos");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyOwnerPositionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AuthorityValidityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IdentityDocument")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsResident")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyPositionInfos");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyRegulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyRegulations");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanySettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DefaultTariff")
                        .HasColumnType("uuid");

                    b.Property<bool>("ForbidSellerEditTariff")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAuction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendAutomatically")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompanySettings");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.FactoringAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankBic")
                        .HasColumnType("varchar(9)");

                    b.Property<string>("BankCheckingAccount")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BankCity")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BankCorrespondentAccount")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("BankOGRN")
                        .HasColumnType("varchar(13)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FactoringContractDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FactoringContractNumber")
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CompanyId");

                    b.ToTable("FactoringAgreements");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.MigrationCardInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<byte>("PositionType")
                        .HasColumnType("smallint");

                    b.Property<string>("RegistrationAddress")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RightToResideDocument")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MigrationCardInfos");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.ResidentPassportInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuingAuthorityPSRN")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<byte>("PositionType")
                        .HasColumnType("smallint");

                    b.Property<string>("SNILS")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ResidentPassportInfos");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.SupplyFactoringAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FactoringAgreementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .HasColumnType("varchar(150)");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FactoringAgreementId");

                    b.ToTable("SupplyFactoringAgreements");
                });

            modelBuilder.Entity("Discounting.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDynamicDiscounting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFactoring")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredNotification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredRegistry")
                        .HasColumnType("boolean");

                    b.Property<byte>("Provider")
                        .HasColumnType("smallint");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SellerId", "BuyerId")
                        .IsUnique();

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Discounting.Entities.FreeDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("FreeDays");
                });

            modelBuilder.Entity("Discounting.Entities.Registry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FactoringAgreementId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FinanceType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("varchar(4000)");

                    b.Property<byte>("SignStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FactoringAgreementId");

                    b.ToTable("Registries");
                });

            modelBuilder.Entity("Discounting.Entities.Regulations.Regulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Regulations");
                });

            modelBuilder.Entity("Discounting.Entities.Regulations.UserProfileRegulationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AuthorityValidityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IdentityDocument")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsResident")
                        .HasColumnType("boolean");

                    b.Property<string>("MigrationCardAddress")
                        .HasColumnType("text");

                    b.Property<string>("MigrationCardPhone")
                        .HasColumnType("text");

                    b.Property<string>("MigrationCardRegistrationAddress")
                        .HasColumnType("text");

                    b.Property<string>("MigrationCardRightToResideDocument")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("PassportDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportIssuingAuthorityPSRN")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportSNILS")
                        .HasColumnType("text");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("text");

                    b.Property<string>("PassportUnitCode")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UserRegulationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserRegulationId")
                        .IsUnique();

                    b.ToTable("UserProfileRegulationInfos");
                });

            modelBuilder.Entity("Discounting.Entities.Regulations.UserRegulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRegulations");
                });

            modelBuilder.Entity("Discounting.Entities.Signature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SignerId")
                        .HasColumnType("uuid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SignerId");

                    b.ToTable("Signatures");

                    b.HasDiscriminator<byte>("Type");
                });

            modelBuilder.Entity("Discounting.Entities.SignatureInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(400)");

                    b.Property<string>("INN")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OGRN")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SNILS")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Serial")
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("SignatureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Thumbprint")
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ValidTill")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SignatureId")
                        .IsUnique();

                    b.ToTable("SignatureInfos");
                });

            modelBuilder.Entity("Discounting.Entities.Supply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AddedBySeller")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BaseDocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("BaseDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("BaseDocumentNumber")
                        .HasColumnType("varchar(150)");

                    b.Property<byte>("BaseDocumentType")
                        .HasColumnType("smallint");

                    b.Property<bool>("BuyerVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DelayEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FactoringAgreementId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasVerification")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<byte>("Provider")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("RegistryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("SellerVerified")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("SupplyId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BaseDocumentId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FactoringAgreementId");

                    b.HasIndex("RegistryId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountToPay")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DiscountedAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<byte>("DiscountingSource")
                        .HasColumnType("smallint");

                    b.Property<bool>("HasChanged")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PlannedPaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric(6,3)");

                    b.Property<Guid>("RegistryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegistryId")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.DiscountSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("DaysType")
                        .HasColumnType("smallint");

                    b.Property<int>("MinimumDaysToShift")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentWeekDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("DiscountSettings");
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.SupplyDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountedAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric(6,3)");

                    b.Property<Guid>("SupplyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId")
                        .IsUnique();

                    b.ToTable("SupplyDiscounts");
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.Tariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("FromAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("FromDay")
                        .HasColumnType("integer");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric(6,3)");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("UntilAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("UntilDay")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.TariffArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FromAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("FromDay")
                        .HasColumnType("integer");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric(6,3)");

                    b.Property<decimal?>("UntilAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("UntilDay")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserId");

                    b.ToTable("TariffArchives");
                });

            modelBuilder.Entity("Discounting.Entities.Templates.BuyerTemplateConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("TemplateId");

                    b.ToTable("BuyerTemplateConnections");
                });

            modelBuilder.Entity("Discounting.Entities.Templates.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Discounting.Entities.UnformalizedDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid?>("DeclinedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeclinedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)5);

                    b.HasKey("Id");

                    b.HasIndex("DeclinedBy");

                    b.HasIndex("SenderId");

                    b.ToTable("UnformalizedDocuments");
                });

            modelBuilder.Entity("Discounting.Entities.UnformalizedDocumentReceiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean");

                    b.Property<bool>("NeedSignature")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnformalizedDocumentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UnformalizedDocumentId");

                    b.ToTable("UnformalizedDocumentReceivers");
                });

            modelBuilder.Entity("Discounting.Entities.Upload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<byte>("Provider")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("Discounting.Entities.CompanyRegulationSignature", b =>
                {
                    b.HasBaseType("Discounting.Entities.Signature");

                    b.Property<Guid>("CompanyRegulationId")
                        .HasColumnType("uuid");

                    b.HasIndex("CompanyRegulationId");

                    b.HasDiscriminator().HasValue((byte)4);
                });

            modelBuilder.Entity("Discounting.Entities.RegistrySignature", b =>
                {
                    b.HasBaseType("Discounting.Entities.Signature");

                    b.Property<Guid>("RegistryId")
                        .HasColumnType("uuid");

                    b.HasIndex("RegistryId");

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("Discounting.Entities.UnformalizedDocumentSignature", b =>
                {
                    b.HasBaseType("Discounting.Entities.Signature");

                    b.Property<Guid>("UnformalizedDocumentId")
                        .HasColumnType("uuid");

                    b.HasIndex("UnformalizedDocumentId");

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("Discounting.Entities.UploadSignature", b =>
                {
                    b.HasBaseType("Discounting.Entities.Signature");

                    b.Property<Guid>("UploadId")
                        .HasColumnType("uuid");

                    b.HasIndex("UploadId");

                    b.HasDiscriminator().HasValue((byte)3);
                });

            modelBuilder.Entity("Discounting.Entities.UserRegulationSignature", b =>
                {
                    b.HasBaseType("Discounting.Entities.Signature");

                    b.Property<Guid>("UserRegulationId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserRegulationId");

                    b.HasDiscriminator().HasValue((byte)5);
                });

            modelBuilder.Entity("Discounting.Entities.Account.Permission", b =>
                {
                    b.HasOne("Discounting.Entities.Account.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Account.User", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Account.UserRole", b =>
                {
                    b.HasOne("Discounting.Entities.Account.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Account.UserToken", b =>
                {
                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Auditing.Audit", b =>
                {
                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyAuthorizedUserInfo", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithOne("CompanyAuthorizedUserInfo")
                        .HasForeignKey("Discounting.Entities.CompanyAggregates.CompanyAuthorizedUserInfo", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyBankInfo", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithMany("CompanyBankInfos")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyContactInfo", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithOne("CompanyContactInfo")
                        .HasForeignKey("Discounting.Entities.CompanyAggregates.CompanyContactInfo", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyOwnerPositionInfo", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithOne("CompanyOwnerPositionInfo")
                        .HasForeignKey("Discounting.Entities.CompanyAggregates.CompanyOwnerPositionInfo", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanyRegulation", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.CompanySettings", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithOne("CompanySettings")
                        .HasForeignKey("Discounting.Entities.CompanyAggregates.CompanySettings", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithOne()
                        .HasForeignKey("Discounting.Entities.CompanyAggregates.CompanySettings", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.FactoringAgreement", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithMany("FactoringAgreements")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.MigrationCardInfo", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithMany("MigrationCardInfos")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.ResidentPassportInfo", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithMany("ResidentPassportInfos")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyAggregates.SupplyFactoringAgreement", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.FactoringAgreement", "FactoringAgreement")
                        .WithMany("SupplyFactoringAgreements")
                        .HasForeignKey("FactoringAgreementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Contract", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Account.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Registry", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Discounting.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.CompanyAggregates.FactoringAgreement", "FactoringAgreement")
                        .WithMany()
                        .HasForeignKey("FactoringAgreementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Discounting.Entities.Regulations.UserProfileRegulationInfo", b =>
                {
                    b.HasOne("Discounting.Entities.Regulations.UserRegulation", "UserRegulation")
                        .WithOne("UserProfileRegulationInfo")
                        .HasForeignKey("Discounting.Entities.Regulations.UserProfileRegulationInfo", "UserRegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Regulations.UserRegulation", b =>
                {
                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Signature", b =>
                {
                    b.HasOne("Discounting.Entities.Account.User", "Signer")
                        .WithMany()
                        .HasForeignKey("SignerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.SignatureInfo", b =>
                {
                    b.HasOne("Discounting.Entities.Signature", "Signature")
                        .WithOne("SignatureInfo")
                        .HasForeignKey("Discounting.Entities.SignatureInfo", "SignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Supply", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Discounting.Entities.Supply", null)
                        .WithMany("ChildSupplies")
                        .HasForeignKey("BaseDocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Discounting.Entities.Contract", "Contract")
                        .WithMany("Supplies")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Account.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.CompanyAggregates.FactoringAgreement", "FactoringAgreement")
                        .WithMany()
                        .HasForeignKey("FactoringAgreementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Discounting.Entities.Registry", "Registry")
                        .WithMany("Supplies")
                        .HasForeignKey("RegistryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.Discount", b =>
                {
                    b.HasOne("Discounting.Entities.Registry", "Registry")
                        .WithOne("Discount")
                        .HasForeignKey("Discounting.Entities.TariffDiscounting.Discount", "RegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.DiscountSettings", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithOne()
                        .HasForeignKey("Discounting.Entities.TariffDiscounting.DiscountSettings", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.SupplyDiscount", b =>
                {
                    b.HasOne("Discounting.Entities.Supply", "Supply")
                        .WithOne("SupplyDiscount")
                        .HasForeignKey("Discounting.Entities.TariffDiscounting.SupplyDiscount", "SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.Tariff", b =>
                {
                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.TariffDiscounting.TariffArchive", b =>
                {
                    b.HasOne("Discounting.Entities.Account.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Templates.BuyerTemplateConnection", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.Templates.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Templates.Template", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.UnformalizedDocument", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Decliner")
                        .WithMany()
                        .HasForeignKey("DeclinedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.UnformalizedDocumentReceiver", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.Company", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Discounting.Entities.UnformalizedDocument", "UnformalizedDocument")
                        .WithMany("Receivers")
                        .HasForeignKey("UnformalizedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.Upload", b =>
                {
                    b.HasOne("Discounting.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.CompanyRegulationSignature", b =>
                {
                    b.HasOne("Discounting.Entities.CompanyAggregates.CompanyRegulation", "CompanyRegulation")
                        .WithMany()
                        .HasForeignKey("CompanyRegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.RegistrySignature", b =>
                {
                    b.HasOne("Discounting.Entities.Registry", "Registry")
                        .WithMany()
                        .HasForeignKey("RegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.UnformalizedDocumentSignature", b =>
                {
                    b.HasOne("Discounting.Entities.UnformalizedDocument", "UnformalizedDocument")
                        .WithMany()
                        .HasForeignKey("UnformalizedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.UploadSignature", b =>
                {
                    b.HasOne("Discounting.Entities.Upload", "Upload")
                        .WithMany()
                        .HasForeignKey("UploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Discounting.Entities.UserRegulationSignature", b =>
                {
                    b.HasOne("Discounting.Entities.Regulations.UserRegulation", "UserRegulation")
                        .WithMany()
                        .HasForeignKey("UserRegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
